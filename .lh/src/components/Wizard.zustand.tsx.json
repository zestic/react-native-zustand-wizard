{
    "sourceFile": "src/components/Wizard.zustand.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752383481560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752383495184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n       {renderNavigation ? (\n         React.createElement(renderNavigation)\n       ) : (\n-        <WizardNavigation />\n+        <WizardNavigationZustand />\n       )}\n     </View>\n   );\n };\n"
                },
                {
                    "date": 1752383509830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n \n       {renderNavigation ? (\n         React.createElement(renderNavigation)\n       ) : (\n-        <WizardNavigation />\n+        <WizardNavigationZustand />\n       )}\n     </View>\n   );\n };\n"
                },
                {
                    "date": 1752383648776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     <View style={styles.container}>\n       {CurrentStepComponent && <CurrentStepComponent store={store} />}\n \n       {renderNavigation ? (\n-        React.createElement(renderNavigation)\n+        React.createElement(renderNavigation())\n       ) : (\n         <WizardNavigationZustand />\n       )}\n     </View>\n"
                },
                {
                    "date": 1752383662005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n     <View style={styles.container}>\n       {CurrentStepComponent && <CurrentStepComponent store={store} />}\n \n       {renderNavigation ? (\n-        React.createElement(renderNavigation)\n+        React.createElement(renderNavigation())\n       ) : (\n         <WizardNavigationZustand />\n       )}\n     </View>\n"
                }
            ],
            "date": 1752383481560,
            "name": "Commit-0",
            "content": "import React, { useMemo } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { WizardProps } from '../types';\nimport { WizardNavigationZustand } from './navigation/WizardNavigation.zustand';\nimport { WizardProvider, useWizard } from '../context/WizardContext';\nimport { colors } from '../theme/colors';\n\n// Internal component that uses the Zustand store\nconst WizardContent: React.FC<Omit<WizardProps, 'steps'>> = ({\n  renderLoading,\n  renderNavigation,\n}) => {\n  const store = useWizard();\n\n  const componentRegistry = useMemo(() => {\n    const registry = new Map<\n      string,\n      React.ComponentType<Record<string, unknown>>\n    >();\n    store.steps.forEach((step) => {\n      // We need to find the original step with component from props\n      // For now, we'll assume the component is passed via the step\n      // This will need to be handled differently in the full migration\n      registry.set(step.id, () => <Text>Step {step.id}</Text>);\n    });\n    return registry;\n  }, [store.steps]);\n\n  const CurrentStepComponent = componentRegistry.get(store.currentStepId);\n\n  if (store.isLoading) {\n    return renderLoading ? (\n      renderLoading()\n    ) : (\n      <View style={styles.loading}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n\n  if (store.error) {\n    return (\n      <View style={styles.error}>\n        <Text style={styles.errorText}>{store.error}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {CurrentStepComponent && <CurrentStepComponent store={store} />}\n\n      {renderNavigation ? (\n        React.createElement(renderNavigation)\n      ) : (\n        <WizardNavigation />\n      )}\n    </View>\n  );\n};\n\n// Main Wizard component that provides the Zustand context\nexport const WizardZustand: React.FC<WizardProps> = ({\n  steps,\n  nextLabel = 'Next',\n  previousLabel = 'Back',\n  finishLabel = 'Finish',\n  renderLoading,\n  renderNavigation,\n}) => {\n  // Process steps to extract the data needed for Zustand store\n  const processedSteps = useMemo(() => {\n    if (!Array.isArray(steps) || steps.length === 0) {\n      throw new Error('Wizard must have at least one step');\n    }\n\n    const lastStepOrder = Math.max(...steps.map((s) => s.order), 0);\n\n    return steps.map((step) => {\n      const isLast = step.order === lastStepOrder;\n      return {\n        id: step.id,\n        order: step.order,\n        canMoveNext: step.canMoveNext ?? false,\n        // Store the component reference separately since Zustand store doesn't need it\n        component: step.component,\n      };\n    });\n  }, [steps]);\n\n  // Create a component registry that can be accessed by the WizardContent\n  const componentRegistry = useMemo(() => {\n    const registry = new Map<\n      string,\n      React.ComponentType<Record<string, unknown>>\n    >();\n    processedSteps.forEach((step) => {\n      registry.set(step.id, step.component);\n    });\n    return registry;\n  }, [processedSteps]);\n\n  return (\n    <WizardProvider\n      steps={processedSteps.map(({ component, ...step }) => step)}\n      nextLabel={nextLabel}\n      previousLabel={previousLabel}\n      finishLabel={finishLabel}\n    >\n      <WizardContentWithRegistry\n        componentRegistry={componentRegistry}\n        renderLoading={renderLoading}\n        renderNavigation={renderNavigation}\n      />\n    </WizardProvider>\n  );\n};\n\n// Component that has access to both the store and component registry\nconst WizardContentWithRegistry: React.FC<{\n  componentRegistry: Map<string, React.ComponentType<Record<string, unknown>>>;\n  renderLoading?: () => React.ReactElement;\n  renderNavigation?: () => React.ComponentType;\n}> = ({ componentRegistry, renderLoading, renderNavigation }) => {\n  const store = useWizard();\n\n  const CurrentStepComponent = componentRegistry.get(store.currentStepId);\n\n  if (store.isLoading) {\n    return renderLoading ? (\n      renderLoading()\n    ) : (\n      <View style={styles.loading}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n\n  if (store.error) {\n    return (\n      <View style={styles.error}>\n        <Text style={styles.errorText}>{store.error}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {CurrentStepComponent && <CurrentStepComponent store={store} />}\n\n      {renderNavigation ? (\n        React.createElement(renderNavigation)\n      ) : (\n        <WizardNavigation />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n  error: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  errorText: {\n    color: colors.error,\n    fontSize: 16,\n  },\n  loading: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n"
        }
    ]
}