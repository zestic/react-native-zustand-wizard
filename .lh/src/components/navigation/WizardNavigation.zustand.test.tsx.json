{
    "sourceFile": "src/components/navigation/WizardNavigation.zustand.test.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752383949921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752383975161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,13 +125,14 @@\n     const CustomButton = ({ title, onPress }: { title: string; onPress: () => void }) => (\n       <button onPress={onPress}>{title} Custom</button>\n     );\n \n-    const { getByText } = renderWithProvider(\n+    const { container } = renderWithProvider(\n       <WizardNavigationZustand ButtonComponent={CustomButton} />\n     );\n \n-    // The text might be split across elements, so let's check for the base text\n-    expect(getByText(/Next/)).toBeTruthy();\n-    expect(getByText(/Previous/)).toBeTruthy();\n+    // Check that the custom button component is being used\n+    // by looking for the button elements\n+    const buttons = container.findAllByType('button');\n+    expect(buttons).toHaveLength(2);\n   });\n });\n"
                },
                {
                    "date": 1752383999295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,14 +125,14 @@\n     const CustomButton = ({ title, onPress }: { title: string; onPress: () => void }) => (\n       <button onPress={onPress}>{title} Custom</button>\n     );\n \n-    const { container } = renderWithProvider(\n+    const result = renderWithProvider(\n       <WizardNavigationZustand ButtonComponent={CustomButton} />\n     );\n \n     // Check that the custom button component is being used\n     // by looking for the button elements\n-    const buttons = container.findAllByType('button');\n+    const buttons = result.root.findAllByType('button');\n     expect(buttons).toHaveLength(2);\n   });\n });\n"
                }
            ],
            "date": 1752383949921,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { WizardNavigationZustand } from './WizardNavigation.zustand';\nimport { WizardProvider } from '../../context/WizardContext';\n\n// Mock the useNavigationContext hook\njest.mock('../../utils/wizardUtils.zustand', () => ({\n  useNavigationContext: jest.fn(),\n}));\n\nconst mockUseNavigationContext = require('../../utils/wizardUtils.zustand').useNavigationContext;\n\nconst defaultSteps = [\n  { id: 'step1', order: 1, canMoveNext: true },\n  { id: 'step2', order: 2, canMoveNext: false },\n];\n\nconst renderWithProvider = (component: React.ReactElement) => {\n  return render(\n    <WizardProvider steps={defaultSteps}>\n      {component}\n    </WizardProvider>\n  );\n};\n\ndescribe('WizardNavigationZustand', () => {\n  const mockOnNext = jest.fn();\n  const mockOnPrevious = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseNavigationContext.mockReturnValue({\n      isPreviousHidden: false,\n      isNextDisabled: false,\n      nextLabel: 'Next',\n      previousLabel: 'Previous',\n      currentStepPosition: 1,\n      totalSteps: 2,\n      onNext: mockOnNext,\n      onPrevious: mockOnPrevious,\n    });\n  });\n\n  it('should render navigation buttons', () => {\n    const { getByText } = renderWithProvider(<WizardNavigationZustand />);\n    \n    expect(getByText('Next')).toBeTruthy();\n    expect(getByText('Previous')).toBeTruthy();\n  });\n\n  it('should call onNext when next button is pressed', () => {\n    const { getByText } = renderWithProvider(<WizardNavigationZustand />);\n    \n    fireEvent.press(getByText('Next'));\n    expect(mockOnNext).toHaveBeenCalledTimes(1);\n  });\n\n  it('should call onPrevious when previous button is pressed', () => {\n    const { getByText } = renderWithProvider(<WizardNavigationZustand />);\n    \n    fireEvent.press(getByText('Previous'));\n    expect(mockOnPrevious).toHaveBeenCalledTimes(1);\n  });\n\n  it('should hide previous button when isPreviousHidden is true', () => {\n    mockUseNavigationContext.mockReturnValue({\n      isPreviousHidden: true,\n      isNextDisabled: false,\n      nextLabel: 'Next',\n      previousLabel: 'Previous',\n      currentStepPosition: 1,\n      totalSteps: 2,\n      onNext: mockOnNext,\n      onPrevious: mockOnPrevious,\n    });\n\n    const { queryByText } = renderWithProvider(<WizardNavigationZustand />);\n    \n    expect(queryByText('Previous')).toBeNull();\n    expect(queryByText('Next')).toBeTruthy();\n  });\n\n  it('should disable next button when isNextDisabled is true', () => {\n    mockUseNavigationContext.mockReturnValue({\n      isPreviousHidden: false,\n      isNextDisabled: true,\n      nextLabel: 'Next',\n      previousLabel: 'Previous',\n      currentStepPosition: 2,\n      totalSteps: 2,\n      onNext: mockOnNext,\n      onPrevious: mockOnPrevious,\n    });\n\n    const { getByText } = renderWithProvider(<WizardNavigationZustand />);\n    \n    const nextButton = getByText('Next');\n    expect(nextButton).toBeTruthy();\n    \n    // Try to press the disabled button\n    fireEvent.press(nextButton);\n    // onNext should not be called when button is disabled\n    expect(mockOnNext).not.toHaveBeenCalled();\n  });\n\n  it('should display custom button labels', () => {\n    mockUseNavigationContext.mockReturnValue({\n      isPreviousHidden: false,\n      isNextDisabled: false,\n      nextLabel: 'Continue',\n      previousLabel: 'Go Back',\n      currentStepPosition: 1,\n      totalSteps: 2,\n      onNext: mockOnNext,\n      onPrevious: mockOnPrevious,\n    });\n\n    const { getByText } = renderWithProvider(<WizardNavigationZustand />);\n    \n    expect(getByText('Continue')).toBeTruthy();\n    expect(getByText('Go Back')).toBeTruthy();\n  });\n\n  it('should render with custom button component', () => {\n    const CustomButton = ({ title, onPress }: { title: string; onPress: () => void }) => (\n      <button onPress={onPress}>{title} Custom</button>\n    );\n\n    const { getByText } = renderWithProvider(\n      <WizardNavigationZustand ButtonComponent={CustomButton} />\n    );\n\n    // The text might be split across elements, so let's check for the base text\n    expect(getByText(/Next/)).toBeTruthy();\n    expect(getByText(/Previous/)).toBeTruthy();\n  });\n});\n"
        }
    ]
}