{
    "sourceFile": "src/components/navigation/WizardNavigation.zustand.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752383838400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752383838400,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { View, StyleSheet, TouchableOpacity, Text } from 'react-native';\nimport { useNavigationContext } from '../../utils/wizardUtils.zustand';\nimport { colors } from '../../theme/colors';\nimport { WizardNavigationProps } from '../../types';\n\n// Default button component with proper disabled styling\nconst DefaultButton = ({\n  onPress,\n  title,\n  disabled,\n}: {\n  onPress: () => void;\n  title: string;\n  disabled?: boolean;\n}) => (\n  <TouchableOpacity\n    onPress={onPress}\n    disabled={disabled}\n    accessibilityRole=\"button\"\n    accessibilityState={{ disabled }}\n    accessibilityLabel={title}\n    accessible={true}\n    style={[styles.button, disabled && styles.disabledButton]}\n  >\n    <Text style={[styles.buttonText, disabled && styles.disabledButtonText]}>\n      {title}\n    </Text>\n  </TouchableOpacity>\n);\n\nexport const WizardNavigationZustand: React.FC<WizardNavigationProps> = ({\n  ButtonComponent = DefaultButton,\n  StepIndicatorComponent,\n  indicatorPosition = 'between',\n}) => {\n  const {\n    isPreviousHidden,\n    isNextDisabled,\n    nextLabel,\n    previousLabel,\n    onNext,\n    onPrevious,\n    currentStepPosition,\n    totalSteps,\n  } = useNavigationContext();\n\n  const renderIndicator = () =>\n    StepIndicatorComponent && (\n      <View\n        accessibilityRole=\"text\"\n        accessibilityLabel={`Step ${currentStepPosition} of ${totalSteps}`}\n      >\n        <StepIndicatorComponent />\n      </View>\n    );\n\n  // For 'between', render: [Prev Button] [StepIndicator] [Next Button]\n  if (indicatorPosition === 'between' && StepIndicatorComponent) {\n    return (\n      <View style={styles.container} accessible={true}>\n        <View style={styles.rowBetween}>\n          <View style={styles.buttonWrapper}>\n            {!isPreviousHidden && (\n              <ButtonComponent\n                onPress={onPrevious}\n                title={previousLabel || ''}\n                disabled={false}\n              />\n            )}\n          </View>\n          <View style={styles.indicatorWrapper}>{renderIndicator()}</View>\n          <View style={styles.buttonWrapper}>\n            <ButtonComponent\n              onPress={onNext}\n              title={nextLabel || ''}\n              disabled={isNextDisabled}\n            />\n          </View>\n        </View>\n      </View>\n    );\n  }\n\n  // For above/below or no indicator, render buttons in a row\n  return (\n    <View style={styles.container} accessible={true}>\n      {indicatorPosition === 'above' && renderIndicator()}\n      <View style={styles.rowButtons}>\n        {/* Left side - Previous button or empty space */}\n        <View style={styles.buttonLeft}>\n          {!isPreviousHidden && (\n            <ButtonComponent\n              onPress={onPrevious}\n              title={previousLabel || ''}\n              disabled={false}\n            />\n          )}\n        </View>\n        {/* Right side - Next button */}\n        <View style={styles.buttonRight}>\n          <ButtonComponent\n            onPress={onNext}\n            title={nextLabel || ''}\n            disabled={isNextDisabled}\n          />\n        </View>\n      </View>\n      {indicatorPosition === 'below' && renderIndicator()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.white,\n    borderTopColor: colors.gray200,\n    borderTopWidth: 1,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  rowBetween: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  rowButtons: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  buttonWrapper: {\n    flex: 1,\n  },\n  indicatorWrapper: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  buttonLeft: {\n    alignItems: 'flex-start',\n    flex: 1,\n  },\n  buttonRight: {\n    alignItems: 'flex-end',\n    flex: 1,\n  },\n  button: {\n    backgroundColor: colors.primary,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    minWidth: 80,\n    alignItems: 'center',\n  },\n  disabledButton: {\n    backgroundColor: colors.gray300,\n  },\n  buttonText: {\n    color: colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  disabledButtonText: {\n    color: colors.gray500,\n  },\n});\n"
        }
    ]
}