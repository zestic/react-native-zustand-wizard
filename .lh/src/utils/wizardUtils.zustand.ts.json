{
    "sourceFile": "src/utils/wizardUtils.zustand.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752383393866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752383393866,
            "name": "Commit-0",
            "content": "import { useWizard } from '../context/WizardContext';\nimport { NavigationContext, StepContext } from '../types';\n\n/**\n * Custom hook that provides step context for Zustand store\n * @param stepId The ID of the step\n * @returns A step context object with the step ID and helper functions\n */\nexport const useStepContext = (stepId: string): StepContext => {\n  const store = useWizard();\n\n  return {\n    stepId,\n    updateField: (field: string, value: unknown) => {\n      store.updateField(stepId, field, value);\n    },\n    getStepData: () => {\n      return store.getStepData(stepId);\n    },\n    canMoveNext: (canMoveNext: boolean) => {\n      // Update the step's canMoveNext property using the new method\n      store.updateStepProperty(stepId, 'canMoveNext', canMoveNext);\n    },\n  };\n};\n\n/**\n * Custom hook that provides navigation context for Zustand store\n * @returns Navigation context with state and actions\n */\nexport function useNavigationContext(): NavigationContext {\n  const store = useWizard();\n\n  return {\n    isPreviousHidden: store.isFirstStep,\n    isNextDisabled: !store.canMoveNext,\n    nextLabel: store.nextButtonLabel,\n    previousLabel: store.previousButtonLabel,\n    currentStepPosition: store.currentStepPosition,\n    totalSteps: store.totalSteps,\n    onNext: async () => {\n      await store.moveNext();\n    },\n    onPrevious: async () => {\n      await store.moveBack();\n    },\n  };\n}\n\n/**\n * Update a field in the wizard store (Zustand version)\n * @param stepId The ID of the step to update\n * @param field The field name to update\n * @param value The new value for the field\n */\nexport const updateField = (\n  stepId: string,\n  field: string,\n  value: unknown\n): void => {\n  // This function is meant to be used outside of React components\n  // For Zustand, we'll need to access the store differently\n  // We'll need to modify this approach or use the store directly\n  throw new Error('updateField should be used within components via useStepContext');\n};\n"
        }
    ]
}