{
    "sourceFile": "src/utils/useNavigationContext.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752381675263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752381675263,
            "name": "Commit-0",
            "content": "import { renderHook, act } from '@testing-library/react-native';\nimport { WizardStore } from '../stores/WizardStore';\nimport { setWizardUtilsStore, useNavigationContext } from './wizardUtils';\n\ndescribe('useNavigationContext', () => {\n  beforeEach(() => {\n    // Reset the store before each test\n    try {\n      setWizardUtilsStore(null as any);\n    } catch (e) {\n      // Ignore error when resetting store\n    }\n  });\n\n  it('should return default values when store is not initialized', () => {\n    const { result } = renderHook(() => useNavigationContext());\n\n    expect(result.current).toEqual({\n      isPreviousHidden: false,\n      isNextDisabled: false, // When store is null, canMoveNext defaults to true\n      nextLabel: '',\n      previousLabel: '',\n      currentStepPosition: 0,\n      totalSteps: 0,\n      onNext: expect.any(Function),\n      onPrevious: expect.any(Function),\n    });\n  });\n\n  it('should update when store values change', async () => {\n    // Create a store with initial values\n    const store = WizardStore.create({\n      currentStepPosition: 1,\n      steps: [\n        { id: 'step1', order: 1, canMoveNext: true },\n        {\n          id: 'step2',\n          order: 2,\n          canMoveNext: false,\n          nextLabel: 'Onward',\n          previousLabel: 'Backward',\n        },\n      ],\n    });\n    setWizardUtilsStore(store);\n\n    const { rerender, result } = renderHook(() => useNavigationContext());\n\n    // Initial values\n    expect(result.current).toEqual({\n      isPreviousHidden: true,\n      isNextDisabled: false,\n      nextLabel: 'Next',\n      previousLabel: 'Previous',\n      currentStepPosition: 1,\n      totalSteps: 2,\n      onNext: expect.any(Function),\n      onPrevious: expect.any(Function),\n    });\n\n    // Update store values\n    await act(async () => {\n      await store.setCurrentStep('step2');\n      // Give the hook time to sync with store\n      await new Promise((resolve) => setTimeout(resolve, 0));\n    });\n\n    // Debug store state\n    console.log('Store state after setCurrentStep:', {\n      currentStepId: store.currentStepId,\n      currentStepPosition: store.currentStepPosition,\n      isFirstStep: store.isFirstStep,\n      canMoveNext: store.canMoveNext,\n      nextButtonLabel: store.nextButtonLabel,\n      previousButtonLabel: store.previousButtonLabel,\n    });\n\n    rerender();\n    // Debug hook state\n    console.log('Hook state:', result.current);\n\n    // Values should reflect changes\n    expect(result.current).toEqual({\n      isPreviousHidden: false,\n      isNextDisabled: true, // Second step cannot move next\n      nextLabel: 'Onward',\n      previousLabel: 'Backward',\n      currentStepPosition: 2,\n      totalSteps: 2,\n      onNext: expect.any(Function),\n      onPrevious: expect.any(Function),\n    });\n  });\n\n  it('should call store methods when onNext/onPrevious are called', async () => {\n    // Create a store with spy methods\n    const store = WizardStore.create({\n      currentStepPosition: 2,\n      steps: [\n        { id: 'step1', order: 1, canMoveNext: true },\n        { id: 'step2', order: 2, canMoveNext: true },\n        { id: 'step3', order: 3, canMoveNext: false },\n      ],\n    });\n\n    // Spy on store methods\n    const moveNextSpy = jest.spyOn(store, 'moveNext');\n    const moveBackSpy = jest.spyOn(store, 'moveBack');\n\n    setWizardUtilsStore(store);\n\n    const { result } = renderHook(() => useNavigationContext());\n\n    // Call onNext\n    await act(async () => {\n      await result.current.onNext();\n    });\n    expect(moveNextSpy).toHaveBeenCalledTimes(1);\n\n    // Call onPrevious\n    await act(async () => {\n      await result.current.onPrevious();\n    });\n    expect(moveBackSpy).toHaveBeenCalledTimes(1);\n  });\n\n  it('should handle custom button labels', () => {\n    const store = WizardStore.create({\n      currentStepPosition: 1,\n      steps: [\n        {\n          id: 'step1',\n          order: 1,\n          canMoveNext: true,\n          nextLabel: 'Continue',\n          previousLabel: 'Go Back',\n        },\n      ],\n    });\n    setWizardUtilsStore(store);\n\n    const { result } = renderHook(() => useNavigationContext());\n\n    expect(result.current.nextLabel).toBe('Continue');\n    expect(result.current.previousLabel).toBe('Go Back');\n  });\n});\n"
        }
    ]
}