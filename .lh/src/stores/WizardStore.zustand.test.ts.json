{
    "sourceFile": "src/stores/WizardStore.zustand.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752381663389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752381663389,
            "name": "Commit-0",
            "content": "import { renderHook, act } from '@testing-library/react-native';\nimport { useWizardStore, Step } from './WizardStore.zustand';\n\n// Test data\nconst defaultSteps: Omit<Step, 'nextLabel' | 'previousLabel'>[] = [\n  {\n    id: 'step1',\n    order: 1,\n    canMoveNext: true,\n  },\n  {\n    id: 'step2',\n    order: 2,\n    canMoveNext: true,\n  },\n];\n\n// Helper to create a fresh store for each test\nconst createTestStore = () => {\n  const { result } = renderHook(() => useWizardStore());\n  return result;\n};\n\ndescribe('WizardStore (Zustand)', () => {\n  describe('initialization', () => {\n    it('should create a store with default values', () => {\n      const store = createTestStore();\n      \n      act(() => {\n        store.current.initializeSteps(defaultSteps);\n      });\n\n      expect(store.current.currentStepId).toBe('step1');\n      expect(store.current.currentStepPosition).toBe(1);\n      expect(store.current.totalSteps).toBe(2);\n      expect(store.current.isLoading).toBe(false);\n      expect(store.current.error).toBe('');\n    });\n\n    it('should throw error if steps are not sequentially ordered', () => {\n      const store = createTestStore();\n      const invalidSteps = [\n        {\n          id: 'step1',\n          order: 1,\n          canMoveNext: true,\n        },\n        {\n          id: 'step2',\n          order: 3, // Invalid - should be 2\n          canMoveNext: true,\n        },\n      ];\n\n      expect(() => {\n        act(() => {\n          store.current.initializeSteps(invalidSteps);\n        });\n      }).toThrow('Step orders must be sequential starting from 1');\n    });\n\n    it('should throw error if no steps are provided', () => {\n      const store = createTestStore();\n\n      expect(() => {\n        act(() => {\n          store.current.initializeSteps([]);\n        });\n      }).toThrow('Wizard must have at least one step');\n    });\n  });\n\n  describe('views/selectors', () => {\n    let store: ReturnType<typeof createTestStore>;\n\n    beforeEach(() => {\n      store = createTestStore();\n      act(() => {\n        store.current.initializeSteps(defaultSteps);\n      });\n    });\n\n    it('should get step by id', () => {\n      const step = store.current.getStepById('step1');\n      expect(step).toBeTruthy();\n      expect(step?.id).toBe('step1');\n    });\n\n    it('should get step data', async () => {\n      await act(async () => {\n        await store.current.setStepData('step1', { name: 'test' });\n      });\n      expect(store.current.getStepData('step1')).toEqual({ name: 'test' });\n    });\n\n    it('should get wizard data', async () => {\n      await act(async () => {\n        await store.current.setStepData('step1', { name: 'test' });\n        await store.current.setStepData('step2', { email: 'test@example.com' });\n      });\n      expect(store.current.getWizardData()).toEqual({\n        step1: { name: 'test' },\n        step2: { email: 'test@example.com' },\n      });\n    });\n\n    it('should check if can move next', () => {\n      expect(store.current.canMoveNext).toBe(true);\n      \n      // Update step to not allow moving next\n      act(() => {\n        const updatedSteps = store.current.steps.map(step => \n          step.id === 'step1' ? { ...step, canMoveNext: false } : step\n        );\n        store.current.initializeSteps(updatedSteps);\n      });\n      \n      expect(store.current.canMoveNext).toBe(false);\n    });\n\n    it('should get next step', () => {\n      const nextStep = store.current.getNextStep();\n      expect(nextStep).toBeTruthy();\n      expect(nextStep?.id).toBe('step2');\n    });\n\n    it('should get previous step', async () => {\n      await act(async () => {\n        await store.current.moveNext();\n      });\n      const prevStep = store.current.getPreviousStep();\n      expect(prevStep).toBeTruthy();\n      expect(prevStep?.id).toBe('step1');\n    });\n\n    it('should get next button label', () => {\n      expect(store.current.nextButtonLabel).toBe('Next');\n    });\n\n    it('should get previous button label', () => {\n      expect(store.current.previousButtonLabel).toBe('Previous');\n    });\n\n    it('should check if is first step', () => {\n      expect(store.current.isFirstStep).toBe(true);\n    });\n\n    it('should check if is last step', async () => {\n      await act(async () => {\n        await store.current.moveNext();\n      });\n      expect(store.current.isLastStep).toBe(true);\n    });\n  });\n\n  describe('actions', () => {\n    let store: ReturnType<typeof createTestStore>;\n\n    beforeEach(() => {\n      store = createTestStore();\n      act(() => {\n        store.current.initializeSteps(defaultSteps);\n      });\n    });\n\n    it('should set loading state', () => {\n      act(() => {\n        store.current.setLoading(true);\n      });\n      expect(store.current.isLoading).toBe(true);\n      \n      act(() => {\n        store.current.setLoading(false);\n      });\n      expect(store.current.isLoading).toBe(false);\n    });\n\n    it('should set error state', () => {\n      act(() => {\n        store.current.setError('Test error');\n      });\n      expect(store.current.error).toBe('Test error');\n      \n      act(() => {\n        store.current.setError(null);\n      });\n      expect(store.current.error).toBe('');\n    });\n\n    it('should set current step', async () => {\n      await act(async () => {\n        await store.current.setCurrentStep('step2');\n      });\n      expect(store.current.currentStepId).toBe('step2');\n      expect(store.current.currentStepPosition).toBe(2);\n    });\n\n    it('should move to next step', async () => {\n      await act(async () => {\n        await store.current.moveNext();\n      });\n      expect(store.current.currentStepId).toBe('step2');\n      expect(store.current.currentStepPosition).toBe(2);\n    });\n\n    it('should move to previous step', async () => {\n      await act(async () => {\n        await store.current.moveNext();\n        await store.current.moveBack();\n      });\n      expect(store.current.currentStepId).toBe('step1');\n      expect(store.current.currentStepPosition).toBe(1);\n    });\n\n    it('should set step data', async () => {\n      await act(async () => {\n        await store.current.setStepData('step1', { name: 'test' });\n      });\n      expect(store.current.getStepData('step1')).toEqual({ name: 'test' });\n    });\n\n    it('should update field', async () => {\n      await act(async () => {\n        await store.current.setStepData('step1', { name: 'test' });\n        await store.current.updateField('step1', 'email', 'test@example.com');\n      });\n      expect(store.current.getStepData('step1')).toEqual({\n        name: 'test',\n        email: 'test@example.com',\n      });\n    });\n\n    it('should reset the store', async () => {\n      await act(async () => {\n        await store.current.setStepData('step1', { name: 'test' });\n        await store.current.moveNext();\n        await store.current.reset();\n      });\n      expect(store.current.currentStepId).toBe('step1');\n      expect(store.current.currentStepPosition).toBe(1);\n      expect(store.current.getStepData('step1')).toEqual({});\n      expect(store.current.isLoading).toBe(false);\n      expect(store.current.error).toBe('');\n    });\n\n    it('should handle setStepData with invalid step id', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      await act(async () => {\n        await store.current.setStepData('invalid-step', { name: 'test' });\n      });\n      expect(consoleSpy).toHaveBeenCalledWith('Step with id invalid-step not found');\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('step initialization with custom labels', () => {\n    it('should initialize steps with custom labels', () => {\n      const store = createTestStore();\n      \n      act(() => {\n        store.current.initializeSteps(\n          defaultSteps,\n          'Continue',\n          'Go Back',\n          'Complete'\n        );\n      });\n\n      expect(store.current.nextButtonLabel).toBe('Continue');\n      expect(store.current.previousButtonLabel).toBe('Go Back');\n      \n      // Move to last step to check finish label\n      act(() => {\n        store.current.moveNext();\n      });\n      expect(store.current.nextButtonLabel).toBe('Complete');\n    });\n  });\n});\n"
        }
    ]
}