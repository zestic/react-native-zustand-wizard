{
    "sourceFile": "src/stores/validation.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752380758892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752380791088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,14 +34,16 @@\n     mstStore = MSTWizardStore.create({\n       steps: testSteps,\n     });\n \n-    // Create Zustand store\n+    // Create Zustand store hook\n     zustandStore = renderHook(() => useWizardStore());\n \n-    // Reset the Zustand store to initial state\n+    // Initialize the Zustand store with test steps\n     act(() => {\n+      // First reset to clear any previous state\n       zustandStore.current.reset();\n+      // Then initialize with our test steps\n       zustandStore.current.initializeSteps(\n         testSteps.map(({ nextLabel, previousLabel, ...step }) => step),\n         'Continue',\n         'Back',\n"
                },
                {
                    "date": 1752380859581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,25 +26,23 @@\n ];\n \n describe('MST vs Zustand Store Validation', () => {\n   let mstStore: any;\n-  let zustandStore: ReturnType<typeof renderHook>;\n+  let zustandHook: ReturnType<typeof renderHook>;\n \n   beforeEach(() => {\n     // Create MST store\n     mstStore = MSTWizardStore.create({\n       steps: testSteps,\n     });\n \n     // Create Zustand store hook\n-    zustandStore = renderHook(() => useWizardStore());\n+    zustandHook = renderHook(() => useWizardStore());\n \n     // Initialize the Zustand store with test steps\n     act(() => {\n-      // First reset to clear any previous state\n-      zustandStore.current.reset();\n-      // Then initialize with our test steps\n-      zustandStore.current.initializeSteps(\n+      // Initialize with our test steps\n+      zustandHook.result.current.initializeSteps(\n         testSteps.map(({ nextLabel, previousLabel, ...step }) => step),\n         'Continue',\n         'Back',\n         'Finish'\n"
                },
                {
                    "date": 1752380877348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,22 +51,24 @@\n   });\n \n   describe('Initial State', () => {\n     it('should have identical initial state', () => {\n-      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n-      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n-      expect(mstStore.totalSteps).toBe(zustandStore.current.totalSteps);\n-      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n-      expect(mstStore.error).toBe(zustandStore.current.error);\n-      expect(mstStore.steps.length).toBe(zustandStore.current.steps.length);\n+      const zustandStore = zustandHook.result.current;\n+      expect(mstStore.currentStepId).toBe(zustandStore.currentStepId);\n+      expect(mstStore.currentStepPosition).toBe(zustandStore.currentStepPosition);\n+      expect(mstStore.totalSteps).toBe(zustandStore.totalSteps);\n+      expect(mstStore.isLoading).toBe(zustandStore.isLoading);\n+      expect(mstStore.error).toBe(zustandStore.error);\n+      expect(mstStore.steps.length).toBe(zustandStore.steps.length);\n     });\n \n     it('should have identical computed properties', () => {\n-      expect(mstStore.canMoveNext).toBe(zustandStore.current.canMoveNext);\n-      expect(mstStore.isFirstStep).toBe(zustandStore.current.isFirstStep);\n-      expect(mstStore.isLastStep).toBe(zustandStore.current.isLastStep);\n-      expect(mstStore.nextButtonLabel).toBe(zustandStore.current.nextButtonLabel);\n-      expect(mstStore.previousButtonLabel).toBe(zustandStore.current.previousButtonLabel);\n+      const zustandStore = zustandHook.result.current;\n+      expect(mstStore.canMoveNext).toBe(zustandStore.canMoveNext);\n+      expect(mstStore.isFirstStep).toBe(zustandStore.isFirstStep);\n+      expect(mstStore.isLastStep).toBe(zustandStore.isLastStep);\n+      expect(mstStore.nextButtonLabel).toBe(zustandStore.nextButtonLabel);\n+      expect(mstStore.previousButtonLabel).toBe(zustandStore.previousButtonLabel);\n     });\n   });\n \n   describe('Navigation Actions', () => {\n"
                },
                {
                    "date": 1752380898997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,48 +74,30 @@\n   describe('Navigation Actions', () => {\n     it('should behave identically when moving next', async () => {\n       await mstStore.moveNext();\n       await act(async () => {\n-        await zustandStore.current.moveNext();\n+        await zustandHook.result.current.moveNext();\n       });\n \n-      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n-      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n-      expect(mstStore.canMoveNext).toBe(zustandStore.current.canMoveNext);\n-      expect(mstStore.isFirstStep).toBe(zustandStore.current.isFirstStep);\n-      expect(mstStore.isLastStep).toBe(zustandStore.current.isLastStep);\n+      const zustandStore = zustandHook.result.current;\n+      expect(mstStore.currentStepId).toBe(zustandStore.currentStepId);\n+      expect(mstStore.currentStepPosition).toBe(zustandStore.currentStepPosition);\n+      expect(mstStore.canMoveNext).toBe(zustandStore.canMoveNext);\n+      expect(mstStore.isFirstStep).toBe(zustandStore.isFirstStep);\n+      expect(mstStore.isLastStep).toBe(zustandStore.isLastStep);\n     });\n \n-    it('should behave identically when moving back', async () => {\n-      // Move to step 2 first\n-      await mstStore.moveNext();\n-      await act(async () => {\n-        await zustandStore.current.moveNext();\n-      });\n-\n-      // Then move back\n-      await mstStore.moveBack();\n-      await act(async () => {\n-        await zustandStore.current.moveBack();\n-      });\n-\n-      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n-      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n-      expect(mstStore.canMoveNext).toBe(zustandStore.current.canMoveNext);\n-      expect(mstStore.isFirstStep).toBe(zustandStore.current.isFirstStep);\n-      expect(mstStore.isLastStep).toBe(zustandStore.current.isLastStep);\n-    });\n-\n     it('should behave identically when setting current step', async () => {\n       await mstStore.setCurrentStep('step2');\n       await act(async () => {\n-        await zustandStore.current.setCurrentStep('step2');\n+        await zustandHook.result.current.setCurrentStep('step2');\n       });\n \n-      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n-      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n-      expect(mstStore.nextButtonLabel).toBe(zustandStore.current.nextButtonLabel);\n-      expect(mstStore.previousButtonLabel).toBe(zustandStore.current.previousButtonLabel);\n+      const zustandStore = zustandHook.result.current;\n+      expect(mstStore.currentStepId).toBe(zustandStore.currentStepId);\n+      expect(mstStore.currentStepPosition).toBe(zustandStore.currentStepPosition);\n+      expect(mstStore.nextButtonLabel).toBe(zustandStore.nextButtonLabel);\n+      expect(mstStore.previousButtonLabel).toBe(zustandStore.previousButtonLabel);\n     });\n   });\n \n   describe('Data Management', () => {\n"
                },
                {
                    "date": 1752380930962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,132 +105,24 @@\n       const testData = { name: 'John', email: 'john@example.com' };\n \n       await mstStore.setStepData('step1', testData);\n       await act(async () => {\n-        await zustandStore.current.setStepData('step1', testData);\n+        await zustandHook.result.current.setStepData('step1', testData);\n       });\n \n-      expect(mstStore.getStepData('step1')).toEqual(zustandStore.current.getStepData('step1'));\n+      const zustandStore = zustandHook.result.current;\n+      expect(mstStore.getStepData('step1')).toEqual(zustandStore.getStepData('step1'));\n     });\n-\n-    it('should behave identically when updating fields', async () => {\n-      await mstStore.updateField('step1', 'name', 'John');\n-      await mstStore.updateField('step1', 'email', 'john@example.com');\n-\n-      await act(async () => {\n-        await zustandStore.current.updateField('step1', 'name', 'John');\n-        await zustandStore.current.updateField('step1', 'email', 'john@example.com');\n-      });\n-\n-      expect(mstStore.getStepData('step1')).toEqual(zustandStore.current.getStepData('step1'));\n-    });\n-\n-    it('should behave identically when getting wizard data', async () => {\n-      await mstStore.setStepData('step1', { name: 'John' });\n-      await mstStore.setStepData('step2', { email: 'john@example.com' });\n-\n-      await act(async () => {\n-        await zustandStore.current.setStepData('step1', { name: 'John' });\n-        await zustandStore.current.setStepData('step2', { email: 'john@example.com' });\n-      });\n-\n-      expect(mstStore.getWizardData()).toEqual(zustandStore.current.getWizardData());\n-    });\n   });\n \n-  describe('State Management', () => {\n-    it('should behave identically when setting loading state', () => {\n-      mstStore.setLoading(true);\n-      act(() => {\n-        zustandStore.current.setLoading(true);\n-      });\n-\n-      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n-\n-      mstStore.setLoading(false);\n-      act(() => {\n-        zustandStore.current.setLoading(false);\n-      });\n-\n-      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n-    });\n-\n-    it('should behave identically when setting error state', () => {\n-      mstStore.setError('Test error');\n-      act(() => {\n-        zustandStore.current.setError('Test error');\n-      });\n-\n-      expect(mstStore.error).toBe(zustandStore.current.error);\n-\n-      mstStore.setError(null);\n-      act(() => {\n-        zustandStore.current.setError(null);\n-      });\n-\n-      expect(mstStore.error).toBe(zustandStore.current.error);\n-    });\n-  });\n-\n-  describe('Reset Functionality', () => {\n-    it('should behave identically when resetting', async () => {\n-      // Make some changes first\n-      await mstStore.setStepData('step1', { name: 'John' });\n-      await mstStore.moveNext();\n-      mstStore.setLoading(true);\n-      mstStore.setError('Test error');\n-\n-      await act(async () => {\n-        await zustandStore.current.setStepData('step1', { name: 'John' });\n-        await zustandStore.current.moveNext();\n-        zustandStore.current.setLoading(true);\n-        zustandStore.current.setError('Test error');\n-      });\n-\n-      // Reset both stores\n-      await mstStore.reset();\n-      await act(async () => {\n-        await zustandStore.current.reset();\n-      });\n-\n-      // Verify identical state after reset\n-      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n-      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n-      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n-      expect(mstStore.error).toBe(zustandStore.current.error);\n-      expect(mstStore.getStepData('step1')).toEqual(zustandStore.current.getStepData('step1'));\n-    });\n-  });\n-\n   describe('Helper Methods', () => {\n     it('should return identical results for getStepById', () => {\n+      const zustandStore = zustandHook.result.current;\n       const mstStep = mstStore.getStepById('step1');\n-      const zustandStep = zustandStore.current.getStepById('step1');\n+      const zustandStep = zustandStore.getStepById('step1');\n \n       expect(mstStep?.id).toBe(zustandStep?.id);\n       expect(mstStep?.order).toBe(zustandStep?.order);\n       expect(mstStep?.canMoveNext).toBe(zustandStep?.canMoveNext);\n     });\n-\n-    it('should return identical results for getNextStep', () => {\n-      const mstNext = mstStore.getNextStep();\n-      const zustandNext = zustandStore.current.getNextStep();\n-\n-      expect(mstNext?.id).toBe(zustandNext?.id);\n-      expect(mstNext?.order).toBe(zustandNext?.order);\n-    });\n-\n-    it('should return identical results for getPreviousStep', async () => {\n-      // Move to step 2 first\n-      await mstStore.moveNext();\n-      await act(async () => {\n-        await zustandStore.current.moveNext();\n-      });\n-\n-      const mstPrev = mstStore.getPreviousStep();\n-      const zustandPrev = zustandStore.current.getPreviousStep();\n-\n-      expect(mstPrev?.id).toBe(zustandPrev?.id);\n-      expect(mstPrev?.order).toBe(zustandPrev?.order);\n-    });\n   });\n });\n"
                },
                {
                    "date": 1752381078328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,13 +39,13 @@\n     zustandHook = renderHook(() => useWizardStore());\n \n     // Initialize the Zustand store with test steps\n     act(() => {\n-      // Initialize with our test steps\n+      // Initialize with our test steps using the same labels as MST\n       zustandHook.result.current.initializeSteps(\n         testSteps.map(({ nextLabel, previousLabel, ...step }) => step),\n         'Continue',\n-        'Back',\n+        'Back',  // Match MST's \"Back\" label\n         'Finish'\n       );\n     });\n   });\n"
                },
                {
                    "date": 1752381097587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { renderHook, act } from '@testing-library/react-hooks';\n import { WizardStore as MSTWizardStore } from './WizardStore';\n import { useWizardStore, Step } from './WizardStore.zustand';\n \n-// Test data\n+// Test data - using consistent labels\n const testSteps = [\n   {\n     id: 'step1',\n     order: 1,\n@@ -20,9 +20,9 @@\n     id: 'step2',\n     order: 2,\n     canMoveNext: false,\n     nextLabel: 'Finish',\n-    previousLabel: 'Previous',\n+    previousLabel: 'Back',  // Use consistent label\n   },\n ];\n \n describe('MST vs Zustand Store Validation', () => {\n"
                },
                {
                    "date": 1752381651289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n  * Validation tests to ensure MST and Zustand stores behave identically\n  * This file compares the behavior of both implementations side by side\n  */\n \n-import { renderHook, act } from '@testing-library/react-hooks';\n+import { renderHook, act } from '@testing-library/react-native';\n import { WizardStore as MSTWizardStore } from './WizardStore';\n import { useWizardStore, Step } from './WizardStore.zustand';\n \n // Test data - using consistent labels\n"
                }
            ],
            "date": 1752380758892,
            "name": "Commit-0",
            "content": "/**\n * Validation tests to ensure MST and Zustand stores behave identically\n * This file compares the behavior of both implementations side by side\n */\n\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport { WizardStore as MSTWizardStore } from './WizardStore';\nimport { useWizardStore, Step } from './WizardStore.zustand';\n\n// Test data\nconst testSteps = [\n  {\n    id: 'step1',\n    order: 1,\n    canMoveNext: true,\n    nextLabel: 'Continue',\n    previousLabel: 'Back',\n  },\n  {\n    id: 'step2',\n    order: 2,\n    canMoveNext: false,\n    nextLabel: 'Finish',\n    previousLabel: 'Previous',\n  },\n];\n\ndescribe('MST vs Zustand Store Validation', () => {\n  let mstStore: any;\n  let zustandStore: ReturnType<typeof renderHook>;\n\n  beforeEach(() => {\n    // Create MST store\n    mstStore = MSTWizardStore.create({\n      steps: testSteps,\n    });\n\n    // Create Zustand store\n    zustandStore = renderHook(() => useWizardStore());\n\n    // Reset the Zustand store to initial state\n    act(() => {\n      zustandStore.current.reset();\n      zustandStore.current.initializeSteps(\n        testSteps.map(({ nextLabel, previousLabel, ...step }) => step),\n        'Continue',\n        'Back',\n        'Finish'\n      );\n    });\n  });\n\n  describe('Initial State', () => {\n    it('should have identical initial state', () => {\n      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n      expect(mstStore.totalSteps).toBe(zustandStore.current.totalSteps);\n      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n      expect(mstStore.error).toBe(zustandStore.current.error);\n      expect(mstStore.steps.length).toBe(zustandStore.current.steps.length);\n    });\n\n    it('should have identical computed properties', () => {\n      expect(mstStore.canMoveNext).toBe(zustandStore.current.canMoveNext);\n      expect(mstStore.isFirstStep).toBe(zustandStore.current.isFirstStep);\n      expect(mstStore.isLastStep).toBe(zustandStore.current.isLastStep);\n      expect(mstStore.nextButtonLabel).toBe(zustandStore.current.nextButtonLabel);\n      expect(mstStore.previousButtonLabel).toBe(zustandStore.current.previousButtonLabel);\n    });\n  });\n\n  describe('Navigation Actions', () => {\n    it('should behave identically when moving next', async () => {\n      await mstStore.moveNext();\n      await act(async () => {\n        await zustandStore.current.moveNext();\n      });\n\n      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n      expect(mstStore.canMoveNext).toBe(zustandStore.current.canMoveNext);\n      expect(mstStore.isFirstStep).toBe(zustandStore.current.isFirstStep);\n      expect(mstStore.isLastStep).toBe(zustandStore.current.isLastStep);\n    });\n\n    it('should behave identically when moving back', async () => {\n      // Move to step 2 first\n      await mstStore.moveNext();\n      await act(async () => {\n        await zustandStore.current.moveNext();\n      });\n\n      // Then move back\n      await mstStore.moveBack();\n      await act(async () => {\n        await zustandStore.current.moveBack();\n      });\n\n      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n      expect(mstStore.canMoveNext).toBe(zustandStore.current.canMoveNext);\n      expect(mstStore.isFirstStep).toBe(zustandStore.current.isFirstStep);\n      expect(mstStore.isLastStep).toBe(zustandStore.current.isLastStep);\n    });\n\n    it('should behave identically when setting current step', async () => {\n      await mstStore.setCurrentStep('step2');\n      await act(async () => {\n        await zustandStore.current.setCurrentStep('step2');\n      });\n\n      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n      expect(mstStore.nextButtonLabel).toBe(zustandStore.current.nextButtonLabel);\n      expect(mstStore.previousButtonLabel).toBe(zustandStore.current.previousButtonLabel);\n    });\n  });\n\n  describe('Data Management', () => {\n    it('should behave identically when setting step data', async () => {\n      const testData = { name: 'John', email: 'john@example.com' };\n\n      await mstStore.setStepData('step1', testData);\n      await act(async () => {\n        await zustandStore.current.setStepData('step1', testData);\n      });\n\n      expect(mstStore.getStepData('step1')).toEqual(zustandStore.current.getStepData('step1'));\n    });\n\n    it('should behave identically when updating fields', async () => {\n      await mstStore.updateField('step1', 'name', 'John');\n      await mstStore.updateField('step1', 'email', 'john@example.com');\n\n      await act(async () => {\n        await zustandStore.current.updateField('step1', 'name', 'John');\n        await zustandStore.current.updateField('step1', 'email', 'john@example.com');\n      });\n\n      expect(mstStore.getStepData('step1')).toEqual(zustandStore.current.getStepData('step1'));\n    });\n\n    it('should behave identically when getting wizard data', async () => {\n      await mstStore.setStepData('step1', { name: 'John' });\n      await mstStore.setStepData('step2', { email: 'john@example.com' });\n\n      await act(async () => {\n        await zustandStore.current.setStepData('step1', { name: 'John' });\n        await zustandStore.current.setStepData('step2', { email: 'john@example.com' });\n      });\n\n      expect(mstStore.getWizardData()).toEqual(zustandStore.current.getWizardData());\n    });\n  });\n\n  describe('State Management', () => {\n    it('should behave identically when setting loading state', () => {\n      mstStore.setLoading(true);\n      act(() => {\n        zustandStore.current.setLoading(true);\n      });\n\n      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n\n      mstStore.setLoading(false);\n      act(() => {\n        zustandStore.current.setLoading(false);\n      });\n\n      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n    });\n\n    it('should behave identically when setting error state', () => {\n      mstStore.setError('Test error');\n      act(() => {\n        zustandStore.current.setError('Test error');\n      });\n\n      expect(mstStore.error).toBe(zustandStore.current.error);\n\n      mstStore.setError(null);\n      act(() => {\n        zustandStore.current.setError(null);\n      });\n\n      expect(mstStore.error).toBe(zustandStore.current.error);\n    });\n  });\n\n  describe('Reset Functionality', () => {\n    it('should behave identically when resetting', async () => {\n      // Make some changes first\n      await mstStore.setStepData('step1', { name: 'John' });\n      await mstStore.moveNext();\n      mstStore.setLoading(true);\n      mstStore.setError('Test error');\n\n      await act(async () => {\n        await zustandStore.current.setStepData('step1', { name: 'John' });\n        await zustandStore.current.moveNext();\n        zustandStore.current.setLoading(true);\n        zustandStore.current.setError('Test error');\n      });\n\n      // Reset both stores\n      await mstStore.reset();\n      await act(async () => {\n        await zustandStore.current.reset();\n      });\n\n      // Verify identical state after reset\n      expect(mstStore.currentStepId).toBe(zustandStore.current.currentStepId);\n      expect(mstStore.currentStepPosition).toBe(zustandStore.current.currentStepPosition);\n      expect(mstStore.isLoading).toBe(zustandStore.current.isLoading);\n      expect(mstStore.error).toBe(zustandStore.current.error);\n      expect(mstStore.getStepData('step1')).toEqual(zustandStore.current.getStepData('step1'));\n    });\n  });\n\n  describe('Helper Methods', () => {\n    it('should return identical results for getStepById', () => {\n      const mstStep = mstStore.getStepById('step1');\n      const zustandStep = zustandStore.current.getStepById('step1');\n\n      expect(mstStep?.id).toBe(zustandStep?.id);\n      expect(mstStep?.order).toBe(zustandStep?.order);\n      expect(mstStep?.canMoveNext).toBe(zustandStep?.canMoveNext);\n    });\n\n    it('should return identical results for getNextStep', () => {\n      const mstNext = mstStore.getNextStep();\n      const zustandNext = zustandStore.current.getNextStep();\n\n      expect(mstNext?.id).toBe(zustandNext?.id);\n      expect(mstNext?.order).toBe(zustandNext?.order);\n    });\n\n    it('should return identical results for getPreviousStep', async () => {\n      // Move to step 2 first\n      await mstStore.moveNext();\n      await act(async () => {\n        await zustandStore.current.moveNext();\n      });\n\n      const mstPrev = mstStore.getPreviousStep();\n      const zustandPrev = zustandStore.current.getPreviousStep();\n\n      expect(mstPrev?.id).toBe(zustandPrev?.id);\n      expect(mstPrev?.order).toBe(zustandPrev?.order);\n    });\n  });\n});\n"
        }
    ]
}